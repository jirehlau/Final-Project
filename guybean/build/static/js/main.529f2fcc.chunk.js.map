{"version":3,"sources":["pages/AddRestaurant/AddRestaurant.jsx","components/UserLogOut/UserLogOut.jsx","pages/OrderHistoryPage/OrderHistoryPage.jsx","components/LoginForm/LoginForm.jsx","components/SignUpForm/SignUpForm.jsx","pages/AuthPage/AuthPage.jsx","pages/Index/Index.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddRestaurant","React","Component","className","OrderHistoryPage","state","orderHistory","a","jwt","localStorage","getItem","fetch","headers","fetchOrdersResponse","json","orders","this","setState","console","error","SignUpForm","email","password","handleChange","evt","target","name","value","handleSubmit","preventDefault","method","body","JSON","stringify","fetchResponse","ok","Error","token","setItem","userDoc","parse","atob","split","user","props","setUserInState","log","onSubmit","autoComplete","type","onChange","required","confirm","disable","disabled","AuthPage","showLogin","onClick","LoginForm","Index","App","incomingUserData","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.529f2fcc.chunk.js","sourcesContent":["import \"./AddRestaurant.css\"\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport UserLogOut from '../../components/UserLogOut/UserLogOut';\n\nclass AddRestaurant extends React.Component {\n\n  // initial state of the app when it first loads\n \n  render(){\n    return (\n      <main className=\"NewOrderPage\">\n        <nav className=\"nav\">\n            <h1>Add Restaurant</h1>\n        </nav>\n      </main>\n    );\n  }\n}\n\nexport default AddRestaurant;\n\n\n\n\n\n  // add to cart button\n  // handleAddToCart = (incoming_item) => {    \n  //   let itemAlreadyExistsInCart = this.state.lineItems.some(obj => obj.item.name === incoming_item.name)\n  //   if (itemAlreadyExistsInCart) {\n  //     // if item already exists in cart, increment quantity in the fanciest way possible: map + ternary operator to replace the object in question.\n  //     // YOU DO: replace with a simple, readable, debuggable for loop.\n  //     this.setState({lineItems: this.state.lineItems.map(obj => obj.item.name === incoming_item.name ? {...obj,qty:obj.qty+1} : obj)})\n  //   } else {\n  //     // if item doesn't exist in cart, copy over existing cart + stick incoming_item in\n  //     this.setState({lineItems: [...this.state.lineItems,{qty:1,item:incoming_item}]})\n  //   }\n  // }\n\n  // send cart to server\n  // handleCheckout = async () => {\n  //   try {\n  //     let jwt = localStorage.getItem('token')\n  //     let fetchResponse = await fetch(\"/api/orders\", {\n  //       method: \"POST\",\n  //       headers: {\"Content-Type\": \"application/json\",'Authorization': 'Bearer ' + jwt},\n  //       body: JSON.stringify({lineItems: this.state.lineItems}) // <-- send this object to server\n  //       }) \n  //     let serverResponse = await fetchResponse.json() // <-- decode fetch response\n  //     console.log(\"Success:\", serverResponse)   // <-- log server response\n\n  //     this.setState({lineItems: []}) // if order sent without errors, set state to empty\n  //   } catch (err) {\n  //     console.error(\"Error:\", err) // <-- log if error \n  //   }\n  // }\n\n\n  // lifecycle method that runs once. fetch the menu from the DB.\n  // async componentDidMount() {\n  //   try {\n  //     let fetchItemsResponse = await fetch('/api/items') // <-- get data from server (Stream object)\n  //     let fetchCatsResponse = await fetch('/api/categories')\n  //     let items = await fetchItemsResponse.json(); // <------- convert fetch response into a js object/array\n  //     let catsObjects = await fetchCatsResponse.json();\n  //     let catsStrings = catsObjects.map(c => c.name) // convert [{\"id\":\"0\", name:\"sandwiches\"},{..] => [\"sandwiches\",..]\n  //     this.setState({ menuItems: items, menuCategories: catsStrings})\n  //   } catch (err) {\n  //     console.error('ERROR:', err) // <-- log if error\n  //   }\n  // }","import React from 'react';\nimport './UserLogOut.css'\n\nclass UserLogOut extends React.Component {\n  render() {\n  return (\n      <div className='UserLogOut'>\n        <div>Name: ??</div>\n        <div>Email: ??</div>\n        <button className=\"btn-sm\">Logout</button>\n      </div>\n  );\n  }\n}\n\nexport default UserLogOut;","import './OrderHistoryPage.css';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport UserLogOut from '../../components/UserLogOut/UserLogOut';\n\n class OrderHistoryPage extends React.Component {\n  state = {\n    orderHistory: []\n  }\n\n  async componentDidMount() {\n    try {\n      let jwt = localStorage.getItem('token')\n      let fetchOrdersResponse = await fetch('/api/orders', {headers: {'Authorization': 'Bearer ' + jwt}})\n      let orders = await fetchOrdersResponse.json(); // <------- convert fetch response into a js object\n\n      // put into sate\n      this.setState({ orderHistory: orders})\n    } catch (err) {\n      console.error('ERROR:', err) // <-- log if error\n    }\n  }\n\n  render() {\n    return (\n      <main className=\"OrderHistoryPage\">\n        <nav>\n            <h1>My Restaurants</h1>\n        </nav>\n        <div></div>\n      </main>\n    )\n  }\n}\n\nexport default OrderHistoryPage;","import { Component } from 'react';\n\nclass SignUpForm extends Component {\n  state = {\n    email: '',\n    password: '',\n    error: ''\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n      error: ''\n    });\n  };\n\n  handleSubmit = async (evt) => {\n    evt.preventDefault();\n    try {\n      // 1. POST our new user info to the server\n      const fetchResponse = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email: this.state.email, password: this.state.password, })\n      })\n\n      // 2. Check \"fetchResponse.ok\". False means status code was 4xx from the server/controller action\n      if (!fetchResponse.ok) throw new Error('Fetch failed - Bad request')\n\n      let token = await fetchResponse.json() // 3. decode fetch response: get jwt token from srv\n      localStorage.setItem('token', token);  // 4. Stick token into localStorage\n\n      const userDoc = JSON.parse(atob(token.split('.')[1])).user; // 5. Decode the token + put user document into state\n      this.props.setUserInState(userDoc)\n\n    } catch (err) {\n      console.log(\"SignupForm error\", err)\n      this.setState({ error: 'Sign Up Failed - Try Again' });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"form-container\" onSubmit={this.handleSubmit}>\n          <form autoComplete=\"off\" >\n            <label>Email</label>\n            <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} required />\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} required />\n            <button type=\"submit\">LOG IN</button>\n          </form>\n        </div>\n        <p className=\"error-message\">&nbsp;{this.state.error}</p>\n      </div>\n    );\n  }\n}\n\nexport default SignUpForm;","import { Component } from 'react';\n\nclass SignUpForm extends Component {\n  state = {\n    name: '',\n    email: '',\n    password: '',\n    confirm: '',\n    error: ''\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n      error: ''\n    });\n  };\n\n  handleSubmit = async (evt) => {\n    evt.preventDefault();\n    try {\n      // 1. POST our new user info to the server\n      const fetchResponse = await fetch('/api/users/signup', {\n        method: 'POST',\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({name: this.state.name, email: this.state.email, password: this.state.password,})\n      })\n      \n      // 2. Check \"fetchResponse.ok\". False means status code was 4xx from the server/controller action\n      if (!fetchResponse.ok) throw new Error('Fetch failed - Bad request')\n      \n      let token = await fetchResponse.json() // 3. decode fetch response to get jwt from srv\n      localStorage.setItem('token', token);  // 4. Stick token into localStorage\n      \n      const userDoc = JSON.parse(atob(token.split('.')[1])).user; // 5. Decode the token + put user document into state\n      this.props.setUserInState(userDoc)\n\n    } catch (err) {\n      console.log(\"SignupForm error\", err)\n      this.setState({ error: 'Sign Up Failed - Try Again' });\n    }\n  }\n\n  render() {\n    const disable = this.state.password !== this.state.confirm;\n    return (\n      <div>\n        <div className=\"form-container\">\n          <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n            <label>Name</label>\n            <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} required />\n            <label>Email</label>\n            <input type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} required />\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} required />\n            <label>Confirm</label>\n            <input type=\"password\" name=\"confirm\" value={this.state.confirm} onChange={this.handleChange} required />\n            <button type=\"submit\" disabled={disable}>SIGN UP</button>\n          </form>\n        </div>\n        <p className=\"error-message\">&nbsp;{this.state.error}</p>\n      </div>\n    );\n  }\n}\n\n\nexport default SignUpForm;","import React from 'react'\nimport './AuthPage.css';\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport SignUpForm from '../../components/SignUpForm/SignUpForm';\n\nclass AuthPage extends React.Component {\n  state = {\n    showLogin: true,\n  }\n\n  render() {\n    return (\n      <main className=\"AuthPage\">\n        <div>\n          <h3 onClick={() => this.setState({ showLogin: !this.state.showLogin })}>\n            {this.state.showLogin ? 'SIGN UP' : 'LOG IN'}\n          </h3>\n        </div>\n        {/* Another ternary operator! */}\n        {/* If showLogin is true, show the login form. If false, show the signup form */}\n        {this.state.showLogin ? \n        <LoginForm setUserInState={this.props.setUserInState}/> : \n        <SignUpForm setUserInState={this.props.setUserInState} />}\n      </main>\n    );\n  }\n}\n\nexport default AuthPage;","import './Index.css';\nimport React from 'react';\n\n\nclass Index extends React.Component {\n    render(){\n        return(\n            <div className=\"Index\">\n                <h1>Index</h1>\n            </div>\n        )\n    }\n}\n\nexport default Index;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport AddRestaurant from './pages/AddRestaurant/AddRestaurant';\nimport OrderHistoryPage from './pages/OrderHistoryPage/OrderHistoryPage';\nimport AuthPage from './pages/AuthPage/AuthPage';\nimport Index from './pages/Index/Index';\n\nclass App extends React.Component{\n  state = {\n    user:null,\n  }\n  \n  setUserInState = (incomingUserData) => {\n    this.setState({ user: incomingUserData})\n  }\n\n  componentDidMount() {\n    let token = localStorage.getItem('token')\n    if (token) {\n      // YOU DO: check expiry!\n      let userDoc = JSON.parse(atob(token.split('.')[1])).user // decode jwt token\n      this.setState({user: userDoc})      \n    }\n  }\n  \n  render() {\n    return (\n      <main className=\"App\">\n        { this.state.user ? \n          <BrowserRouter>\n            <Switch>\n       \n              <Route path='/addRestaurant' render={(props) => (\n                <AddRestaurant {...props}/>\n              )}/>\n              <Route path='/orders' render={(props) => (\n                <OrderHistoryPage {...props}/>\n              )}/>\n              <Route path='/' render={(props) => (\n              <Index {...props}/>\n              )}/>\n              {/* <Redirect to=\"/\" /> */}\n            </Switch>\n          </BrowserRouter>\n          :\n          <AuthPage setUserInState={this.setUserInState}/>\n        }\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}