{"version":3,"sources":["components/MyRestaurants/MyRestaurants.jsx","pages/Restaurants/Restaurants.jsx","components/LoginForm/LoginForm.jsx","components/SignUpForm/SignUpForm.jsx","pages/AuthPage/AuthPage.jsx","pages/AddRestaurantForm/AddRestaurantForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["MyRestaurants","state","restaurantList","a","jwt","localStorage","getItem","fetch","method","headers","fetchRestaurantsResponse","json","restaurant","console","log","this","setState","error","className","map","r","name","address","contactNumber","pictureURL","Component","Restaurants","restaurants","registrationDate","cuisineType","paymentOptions","restaurantInfo","to","restaurantlist","React","LoginForm","email","password","handleChange","evt","target","value","handleSubmit","preventDefault","body","JSON","stringify","fetchResponse","ok","Error","token","setItem","userDoc","parse","atob","split","user","props","setUserInState","onSubmit","autoComplete","type","onChange","required","SignUpForm","confirm","history","push","disable","disabled","AuthPage","showLogin","onClick","AddRestaurantForm","addRestaurant","e","serverResponse","placeholder","App","incomingUserData","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9901c9b.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './MyRestaurants.css';\n\nclass MyRestaurants extends Component {\n    state = {\n        restaurantList: [],\n    };\n    async componentDidMount() {\n        try {\n            let jwt = localStorage.getItem('token')\n            let fetchRestaurantsResponse = await fetch('/api/restaurantRoutes/myrestaurants', {\n                method: \"GET\",\n                headers: {\"Content-Type\": \"application/json\",'Authorization': 'Bearer ' + jwt},\n              }) \n              let restaurant = await fetchRestaurantsResponse.json();   \n              console.log(restaurant)      \n              this.setState({ restaurantList: restaurant})\n            console.log(\"putting restaurant in state\")\n        } catch (err) {\n            console.error('ERROR:', err) // <-- log if error\n        }\n      }\n\n    render(){\n        return(\n            <main className=\"MyRestaurants\">\n                <nav className=\"MyRestaurantsNav\">\n                </nav>\n                <div>\n                    {this.state.restaurantList.map(\n                        r => r.name,\n                    )}\n                    <br></br>\n                   {this.state.restaurantList.map(\n                        r => r.address,\n                    )}          \n                    <br></br>\n                   {this.state.restaurantList.map(\n                        r => r.contactNumber,\n                    )}       \n                    <br></br>\n                   {this.state.restaurantList.map(\n                        r => r.pictureURL,\n                    )}                                      \n                </div>\n            </main>\n        )\n    }\n}\n\nexport default MyRestaurants;","import './Restaurants.css';\nimport React from 'react';\n// import AddRestaurant from '../../components/AddRestaurant/AddRestaurant';\nimport MyRestaurants from '../../components/MyRestaurants/MyRestaurants';\nimport { Link } from 'react-router-dom';\n// import UserLogOut  from '../../components/UserLogOut/UserLogOut';\n\n class Restaurants extends React.Component {\n  state = {\n    restaurants: [{\n      name: \"\",\n      registrationDate: \"\",\n      cuisineType: \"\",\n      address: \"\",\n      contactNumber: \"\", \n      paymentOptions: \"\",\n      restaurantInfo: \"\",\n      pictureURL: \"\",\n  }],\n} \n\nasync componentDidMount() {\n  try {\n      let jwt = localStorage.getItem('token')\n      let fetchRestaurantsResponse = await fetch('/api/restaurantRoutes/MyRestaurants', {\n        method: \"GET\",\n        headers: {\"Content-Type\": \"application/json\",'Authorization': 'Bearer ' + jwt},\n      }) \n      console.log(\"fetching something from my restuarants\")\n      let restaurants = await fetchRestaurantsResponse.json();\n      console.log(\"fetching restaurants response\")\n      this.setState({restaurantList: restaurants})\n      console.log(\"putting restaurant in state\")\n  } catch (err) {\n      console.error('ERROR:', err) // <-- log if error\n  }\n}\n\n  render() {\n    return (\n      <main className=\"Restaurants\">\n        <nav className=\"RestaurantsNav\">\n          <ul>\n            <li>Home</li>\n            <li>Company</li>\n            <li><Link to ='../AddRestaurantForm/AddRestaurantForm.jsx'>Add Restaurant</Link></li>\n            <li>Contact us</li>\n          </ul>\n        </nav>\n        <div>\n          <MyRestaurants restaurantList={this.state.restaurantlist} />\n\n        </div>\n      </main>\n    )\n  }\n}\n\nexport default Restaurants;","import { Component } from 'react';\n\nclass LoginForm extends Component {\n  state = {\n    email: '',\n    password: '',\n    error: ''\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n      error: ''\n    });\n  };\n\n  handleSubmit = async (evt) => {\n    evt.preventDefault();\n    try {\n      // 1. POST our new user info to the server\n      const fetchResponse = await fetch('/api/users/login', {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email: this.state.email, password: this.state.password, })\n      })\n\n      // 2. Check \"fetchResponse.ok\". False means status code was 4xx from the server/controller action\n      if (!fetchResponse.ok) throw new Error('Fetch failed - Bad request')\n\n      let token = await fetchResponse.json() // 3. decode fetch response: get jwt token from srv\n      localStorage.setItem('token', token);  // 4. Stick token into localStorage\n\n      const userDoc = JSON.parse(atob(token.split('.')[1])).user; // 5. Decode the token + put user document into state\n      this.props.setUserInState(userDoc)\n\n    } catch (err) {\n      console.log(\"SignupForm error\", err)\n      this.setState({ error: 'Sign Up Failed - Try Again' });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"form-container\" onSubmit={this.handleSubmit}>\n          <form autoComplete=\"off\" >\n            <label>Email</label>\n            <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} required />\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} required />\n            <button type=\"submit\">LOG IN</button>\n          </form>\n        </div>\n        <p className=\"error-message\">&nbsp;{this.state.error}</p>\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;","import { Component } from 'react';\n\nclass SignUpForm extends Component {\n  state = {\n    name: '',\n    email: '',\n    password: '',\n    confirm: '',\n    error: ''\n  };\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n      error: ''\n    });\n  };\n\n  handleSubmit = async (evt) => {\n    evt.preventDefault();\n    try {\n      // 1. POST our new user info to the server\n      const fetchResponse = await fetch('/api/userRoutes/signup', {\n        method: 'POST',\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({name: this.state.name, email: this.state.email, password: this.state.password,})\n      })\n      console.log(\"sending login details to server\")\n      // 2. Check \"fetchResponse.ok\". False means status code was 4xx from the server/controller action\n      if (!fetchResponse.ok) throw new Error('Fetch failed - Bad request')\n      // console.log(\"checking for server errors\")\n      let token = await fetchResponse.json() // 3. decode fetch response to get jwt from srv\n      localStorage.setItem('token', token);  // 4. Stick token into localStorage\n      // console.log(\"putting token into local storage\")\n      const userDoc = JSON.parse(atob(token.split('.')[1])).user; // 5. Decode the token + put user document into state\n      // console.log(\"decoding token and grabbing user from token\")\n      this.props.setUserInState(userDoc)\n      // console.log(\"putting user into state\")\n      this.props.history.push('/Restaurants')\n    } catch (err) { \n      // console.log(\"SignupForm error\", err)\n      this.setState({ error: 'Sign Up Failed - Try Again' });\n    } \n  }\n\n  render() {\n    const disable = this.state.password !== this.state.confirm;\n    return (\n      <div>\n        <div className=\"form-container\">\n          <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n            <label>Name</label>\n            <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} required />\n            <label>Email</label>\n            <input type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} required />\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} required />\n            <label>Confirm</label>\n            <input type=\"password\" name=\"confirm\" value={this.state.confirm} onChange={this.handleChange} required />\n            <button type=\"submit\" disabled={disable}>SIGN UP</button>\n          </form>\n        </div>\n        <p className=\"error-message\">&nbsp;{this.state.error}</p>\n      </div>\n    );\n  }\n}\n\n\nexport default SignUpForm;","import React from 'react'\nimport './AuthPage.css';\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport SignUpForm from '../../components/SignUpForm/SignUpForm';\n\nclass AuthPage extends React.Component {\n  state = {\n    showLogin: true,\n  }\n\n  render() {\n    return (\n      <main className=\"AuthPage\">\n        <div>\n          <button onClick={() => this.setState({ showLogin: !this.state.showLogin })}>\n            {this.state.showLogin ? 'CLICK HERE TO SIGN UP' : 'CLICK HERE TO LOG IN'}\n          </button>\n        </div>\n        {/* Another ternary operator! */}\n        {/* If showLogin is true, show the login form. If false, show the signup form */}\n        {this.state.showLogin ? \n        <LoginForm setUserInState={this.props.setUserInState}/> : \n        <SignUpForm setUserInState={this.props.setUserInState} />}\n      </main>\n    );\n  }\n}\n\nexport default AuthPage;","import { Component } from 'react';\nimport './AddRestaurantForm.css';\nimport { Link } from 'react-router-dom';\n// import axios from 'axios';\n\n\nclass AddRestaurantForm extends Component {\n\n   state = {\n        name: \"\", \n        registrationDate: \"\",\n        cuisineType: \"\",\n        address: \"\",\n        contactNumber:\"\",\n        paymentOptions: \"\",\n        restaurantInfo: \"\",\n        // selectedFile: null\n    };\n\n    addRestaurant = async (e) => {\n        e.preventDefault();\n        console.log(\"before try\")\n        try {\n            console.log(\"before fetch\")\n        let fetchResponse = await fetch(\"/api/restaurantRoutes/addrestaurantform\", {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({\n                // restaurants: this.state.restaurants,\n                name: this.state.name,\n                registrationDate: this.state.registrationDate,\n                cuisineType: this.state.cuisineType,\n                address: this.state.address,\n                contactNumber: this.state.contactNumber,\n                paymentOptions: this.state.paymentOptions,\n                restaurantInfo: this.state.restaurantInfo,\n                pictureURL: this.state.pictureURL,\n                }) // <-- send this object to server\n            }) \n            console.log(\"fetching response\")\n        let serverResponse = await fetchResponse.json() // <-- decode fetch response\n        console.log(\"Success, this is jireh:\", serverResponse)   // <-- log server response\n        // if the order was sent over without errors, set state to empty\n        } catch (err) {\n        console.error(\"Error:\", err) // <-- log if error \n        }\n  }\n\n    handleChange = e => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    // fileSelectedHandler = event => {\n    //     this.setState({\n    //         selectedFile: event.target.files[0]\n    //     })\n    // }\n    // fileUploadHandler =() => {\n    //     const fd = new FormData();\n    //     fd.append('image', this.state.selectedFile, this.state.selectedFile.name)\n    //     axios.post('', fd)\n    //         .then(res => {\n    //             console.log(res);\n    //     });\n    // }\n\n    render(){\n        return(\n            <main className=\"AddRestaurantForm\">\n                <nav className=\"AddRestaurantFormNav\">\n                    <h1>Add Restaurant Form</h1>\n                    <Link to ='../MyRestaurants/MyRestaurants.jsx'>Restaurants</Link>\n                </nav>\n                <form onSubmit={this.addRestaurant}>\n                    <label>\n                        <p>Restaurant Name</p>\n                        <input name=\"name\"  placeholder=\"Lau's Cuisine\" value={this.state.name} onChange={this.handleChange} />\n                    </label>\n                    <label>\n                        <p>Incorporation Date</p>\n                        <input type=\"date\" name=\"registrationDate\" value={this.state.registrationDate} onChange={this.handleChange} />\n                    </label>\n                    <label>\n                        <p>Cuisine</p>\n                        <select name=\"cuisineType\" value={this.state.cuisineType} onChange={this.handleChange}>\n                            <option value=\"Japanese\">Japanese</option>\n                            <option value=\"Korean\">Korean</option>\n                            <option value=\"Chinese\">Chinese</option>\n                            <option value=\"American\">American</option>\n                            <option value=\"Indian\">Indian</option>\n                            <option value=\"Italian\">Italian</option>\n                            <option value=\"Middle Eastern\">Middle Eastern</option>        \n                            <option value=\"Others\">Others</option>        \n                        </select>    \n                    </label>\n                    <label>\n                    <p>Address</p>\n                        <input type=\"text\" name=\"address\" placeholder=\"123 Eats Way\" value={this.state.address} onChange={this.handleChange} />                  \n                    </label>\n                    <label>\n                    <p>Contact Number</p>\n                        <input type=\"text\" name=\"contactNumber\" placeholder=\"(416) 225-1234\" value={this.state.contactNumber} onChange={this.handleChange} />                  \n                    </label>\n                    <label>\n                    <p>Payment Options</p>\n                        <input type=\"text\" name=\"paymentOptions\" placeholder=\"Cash, Credit card, etc\" value={this.state.paymentOptions} onChange={this.handleChange} />                  \n                    </label>\n                    <label>\n                    <p>Additional Information</p>\n                        <input type=\"text\" name=\"restaurantInfo\" placeholder=\"Cash only, indoors and patio, etc\" value={this.state.restaurantInfo} onChange={this.handleChange} />                  \n                    </label> \n                    <label>\n                    <p>Insert Picture with URL</p>\n                        <input type=\"text\" name=\"pictureURL\" placeholder=\"Cash only, indoors and patio, etc\" value={this.state.pictureURL} onChange={this.handleChange} />                  \n                    </label> \n                    <br></br><br></br>\n\n                    <button onClick={this.addRestaurant}>Add Restaurant</button>\n                </form>\n            </main>\n        )\n    }\n}\n\nexport default AddRestaurantForm;\n\n\n\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Restaurants from './pages/Restaurants/Restaurants';\nimport AuthPage from './pages/AuthPage/AuthPage';\nimport AddRestaurantForm from './pages/AddRestaurantForm/AddRestaurantForm';\n\n\nclass App extends React.Component{\n  state = {\n    user:null,\n  }\n  \n  setUserInState = (incomingUserData) => {\n    this.setState({ user: incomingUserData})\n  }\n\n  componentDidMount() {\n    let token = localStorage.getItem('token')\n    if (token) {\n      // YOU DO: check expiry!\n      let userDoc = JSON.parse(atob(token.split('.')[1])).user // decode jwt token\n      this.setState({user: userDoc})      \n    }\n  }\n  \n  render() {\n    return (\n     <BrowserRouter>\n      <main className=\"App\">\n       \n        { this.state.user ? \n            <Switch>\n              <Route path='/Restaurants' render={(props) => (\n                <Restaurants {...props}/>\n              )}/>\n              <Route path='/AddRestaurantForm' render={(props) => (\n                <AddRestaurantForm {...props}/>\n              )}/>\n\n              <Redirect to=\"/Restaurants\" />\n            </Switch>\n          :\n          <div>\n            <Route path='/' render={(props) => (\n            <AuthPage setUserInState={this.setUserInState} {...props}/>\n            )}/>\n          </div>\n        }\n      </main>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}