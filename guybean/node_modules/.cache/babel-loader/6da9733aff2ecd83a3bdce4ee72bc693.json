{"ast":null,"code":"var _jsxFileName = \"/Users/jirehlau/Documents/GA/12 Weeks/Projects/Final-Project/guybean/src/pages/AddRestaurant/AddRestaurant.jsx\";\nimport \"./AddRestaurant.css\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport UserLogOut from '../../components/UserLogOut/UserLogOut';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddRestaurant extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: \"\",\n      registrationDate: this.getDate(),\n      cuisineType: \"\",\n      address: \"\",\n      contactNumber: \"\",\n      paymentOptions: \"\",\n      restaurantInfo: \"\",\n      pictureURL: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"NewOrderPage\",\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"nav\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Add Restaurant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AddRestaurant; // add to cart button\n// handleAddToCart = (incoming_item) => {    \n//   let itemAlreadyExistsInCart = this.state.lineItems.some(obj => obj.item.name === incoming_item.name)\n//   if (itemAlreadyExistsInCart) {\n//     // if item already exists in cart, increment quantity in the fanciest way possible: map + ternary operator to replace the object in question.\n//     // YOU DO: replace with a simple, readable, debuggable for loop.\n//     this.setState({lineItems: this.state.lineItems.map(obj => obj.item.name === incoming_item.name ? {...obj,qty:obj.qty+1} : obj)})\n//   } else {\n//     // if item doesn't exist in cart, copy over existing cart + stick incoming_item in\n//     this.setState({lineItems: [...this.state.lineItems,{qty:1,item:incoming_item}]})\n//   }\n// }\n// send cart to server\n// handleCheckout = async () => {\n//   try {\n//     let jwt = localStorage.getItem('token')\n//     let fetchResponse = await fetch(\"/api/orders\", {\n//       method: \"POST\",\n//       headers: {\"Content-Type\": \"application/json\",'Authorization': 'Bearer ' + jwt},\n//       body: JSON.stringify({lineItems: this.state.lineItems}) // <-- send this object to server\n//       }) \n//     let serverResponse = await fetchResponse.json() // <-- decode fetch response\n//     console.log(\"Success:\", serverResponse)   // <-- log server response\n//     this.setState({lineItems: []}) // if order sent without errors, set state to empty\n//   } catch (err) {\n//     console.error(\"Error:\", err) // <-- log if error \n//   }\n// }\n// lifecycle method that runs once. fetch the menu from the DB.\n// async componentDidMount() {\n//   try {\n//     let fetchItemsResponse = await fetch('/api/items') // <-- get data from server (Stream object)\n//     let fetchCatsResponse = await fetch('/api/categories')\n//     let items = await fetchItemsResponse.json(); // <------- convert fetch response into a js object/array\n//     let catsObjects = await fetchCatsResponse.json();\n//     let catsStrings = catsObjects.map(c => c.name) // convert [{\"id\":\"0\", name:\"sandwiches\"},{..] => [\"sandwiches\",..]\n//     this.setState({ menuItems: items, menuCategories: catsStrings})\n//   } catch (err) {\n//     console.error('ERROR:', err) // <-- log if error\n//   }\n// }","map":{"version":3,"sources":["/Users/jirehlau/Documents/GA/12 Weeks/Projects/Final-Project/guybean/src/pages/AddRestaurant/AddRestaurant.jsx"],"names":["React","Link","UserLogOut","AddRestaurant","Component","state","name","registrationDate","getDate","cuisineType","address","contactNumber","paymentOptions","restaurantInfo","pictureURL","render"],"mappings":";AAAA,OAAO,qBAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;;;AAEA,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA4C;AAAA;AAAA;AAAA,SAG1CC,KAH0C,GAGlC;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,gBAAgB,EAAE,KAAKC,OAAL,EAFZ;AAGNC,MAAAA,WAAW,EAAE,EAHP;AAINC,MAAAA,OAAO,EAAE,EAJH;AAKNC,MAAAA,aAAa,EAAE,EALT;AAMNC,MAAAA,cAAc,EAAE,EANV;AAONC,MAAAA,cAAc,EAAE,EAPV;AAQNC,MAAAA,UAAU,EAAE;AARN,KAHkC;AAAA;;AAgB1CC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAM,MAAA,SAAS,EAAC,cAAhB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAxByC;;AA2B5C,eAAeZ,aAAf,C,CAME;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import \"./AddRestaurant.css\"\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport UserLogOut from '../../components/UserLogOut/UserLogOut';\n\nclass AddRestaurant extends React.Component {\n\n  // initial state of the app when it first loads\n  state = {\n    name: \"\",\n    registrationDate: this.getDate(),\n    cuisineType: \"\",\n    address: \"\",\n    contactNumber: \"\", \n    paymentOptions: \"\",\n    restaurantInfo: \"\",\n    pictureURL: \"\",\n  }\n\n\n  \n  render() {\n    return (\n      <main className=\"NewOrderPage\">\n        <nav className=\"nav\">\n            <h1>Add Restaurant</h1>\n        </nav>\n      </main>\n    );\n  }\n}\n\nexport default AddRestaurant;\n\n\n\n\n\n  // add to cart button\n  // handleAddToCart = (incoming_item) => {    \n  //   let itemAlreadyExistsInCart = this.state.lineItems.some(obj => obj.item.name === incoming_item.name)\n  //   if (itemAlreadyExistsInCart) {\n  //     // if item already exists in cart, increment quantity in the fanciest way possible: map + ternary operator to replace the object in question.\n  //     // YOU DO: replace with a simple, readable, debuggable for loop.\n  //     this.setState({lineItems: this.state.lineItems.map(obj => obj.item.name === incoming_item.name ? {...obj,qty:obj.qty+1} : obj)})\n  //   } else {\n  //     // if item doesn't exist in cart, copy over existing cart + stick incoming_item in\n  //     this.setState({lineItems: [...this.state.lineItems,{qty:1,item:incoming_item}]})\n  //   }\n  // }\n\n  // send cart to server\n  // handleCheckout = async () => {\n  //   try {\n  //     let jwt = localStorage.getItem('token')\n  //     let fetchResponse = await fetch(\"/api/orders\", {\n  //       method: \"POST\",\n  //       headers: {\"Content-Type\": \"application/json\",'Authorization': 'Bearer ' + jwt},\n  //       body: JSON.stringify({lineItems: this.state.lineItems}) // <-- send this object to server\n  //       }) \n  //     let serverResponse = await fetchResponse.json() // <-- decode fetch response\n  //     console.log(\"Success:\", serverResponse)   // <-- log server response\n\n  //     this.setState({lineItems: []}) // if order sent without errors, set state to empty\n  //   } catch (err) {\n  //     console.error(\"Error:\", err) // <-- log if error \n  //   }\n  // }\n\n\n  // lifecycle method that runs once. fetch the menu from the DB.\n  // async componentDidMount() {\n  //   try {\n  //     let fetchItemsResponse = await fetch('/api/items') // <-- get data from server (Stream object)\n  //     let fetchCatsResponse = await fetch('/api/categories')\n  //     let items = await fetchItemsResponse.json(); // <------- convert fetch response into a js object/array\n  //     let catsObjects = await fetchCatsResponse.json();\n  //     let catsStrings = catsObjects.map(c => c.name) // convert [{\"id\":\"0\", name:\"sandwiches\"},{..] => [\"sandwiches\",..]\n  //     this.setState({ menuItems: items, menuCategories: catsStrings})\n  //   } catch (err) {\n  //     console.error('ERROR:', err) // <-- log if error\n  //   }\n  // }"]},"metadata":{},"sourceType":"module"}